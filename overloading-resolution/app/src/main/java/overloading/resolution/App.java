/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package overloading.resolution;

import org.gradle.api.Project;
import org.gradle.api.model.ObjectFactory;
import org.gradle.api.provider.Property;
import org.gradle.api.provider.Provider;
import org.gradle.api.provider.ProviderFactory;
import org.gradle.testfixtures.ProjectBuilder;

public class App {

    private final ObjectFactory objectFactory;
    private final ProviderFactory providerFactory;

    private App() {
        Project gradleProject = ProjectBuilder.builder().build();
        objectFactory = gradleProject.getObjects();
        providerFactory = gradleProject.getProviders();
    }

    private String foo(Object o) {
        return "Object (foo)";
    }

    private String bar(Object o) {
        return "Object (bar)";
    }

    private String foo(String s) {
        return "String: " + s;
    }

    private String foo(Integer i) {
        return "Integer: " + i;
    }

    // Provider type must be an exact match, else the overloading resolves to Object

    private String foo(Provider<Object> objProvider) {
        return "Provider<Object> (foo): " + objProvider.get();
    }

    private String bar(Provider<String> stringProvider) {
        return "Provider<String> (bar): " + stringProvider.get();
    }

    // Demo with different argument types

    public void callOverloadedMethod() {
        String myString = "myString";
        Integer oneInteger = 1;
        int oneInt = 1;
        float oneFloat = 1;
        Property<String> stringProperty = objectFactory.property(String.class).value("propertyString");
        Provider<String> stringProvider = providerFactory.provider(() -> "providerString");
        Property<Object> objectProperty = objectFactory.property(Object.class).value("propertyString");
        Provider<Object> objectProvider = providerFactory.provider(() -> "providerString");
        System.out.println();
        System.out.println("**** String, Integer, int, float ****");
        System.out.println("String: " + foo(myString));
        System.out.println("Integer: " + foo(oneInteger));
        System.out.println("int: " + foo(oneInt));
        System.out.println("float: " + foo(oneFloat));
        System.out.println();
        System.out.println("**** foo(Object o) vs. foo(Provider<Object> objProvider) ****");
        System.out.println("Property<String>: " +  foo(stringProperty));
        System.out.println("Provider<String>: " +  foo(stringProvider));
        System.out.println("Property<Object>: " +  foo(objectProperty));
        System.out.println("Provider<Object>: " +  foo(objectProvider));
        System.out.println();
        System.out.println("**** bar(Object o) vs. bar(Provider<String> stringProvider) ****");
        System.out.println("Property<String>: " +  bar(stringProperty));
        System.out.println("Provider<String>: " +  bar(stringProvider));
        System.out.println("Property<Object>: " +  bar(objectProperty));
        System.out.println("Provider<Object>: " +  bar(objectProvider));
    }

    public static void main(String[] args) {
        System.out.println("**** Main method ****");
        App myApp = new App();
        myApp.callOverloadedMethod();
    }
}
